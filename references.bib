@article{Vermeyden2023,
  title = {Teaching {{Technical Topics Effectively}}: {{How Teaching Humanists Has Changed How We Teach Everyone}}},
  shorttitle = {Teaching {{Technical Topics Effectively}}},
  author = {Vermeyden, Lydia and Fishbein, Grace},
  year = {2023},
  month = jun,
  journal = {IDEAH},
  doi = {10.21428/f1f23564.e065e8ef},
  urldate = {2024-02-12},
  langid = {english},
  file = {/home/ostueker/Zotero/storage/KYRYDQ9M/Vermeyden and Fishbein - 2023 - Teaching Technical Topics Effectively How Teachin.pdf}
}

@article{Wilson2014,
  title = {Best {{Practices}} for {{Scientific Computing}}},
  author = {Wilson, Greg and Aruliah, D. A. and Brown, C. Titus and Chue Hong, Neil P. and Davis, Matt and Guy, Richard T. and Haddock, Steven H.D. and Huff, Kathryn D. and Mitchell, Ian M. and Plumbley, Mark D. and Waugh, Ben and White, Ethan P. and Wilson, Paul},
  year = {2014},
  journal = {PLoS Biology},
  volume = {12},
  number = {1},
  issn = {15449173},
  doi = {10.1371/journal.pbio.1001745},
  abstract = {Scientists spend an increasing amount of time building and using software. However, most scientists are never taught how to do this efficiently. As a result, many are unaware of tools and practices that would allow them to write more reliable and maintainable code with less effort. We describe a set of best practices for scientific software development that have solid foundations in research and experience, and that improve scientists' productivity and the reliability of their software.},
  file = {/home/ostueker/Zotero/storage/U5NL9G5Y/Wilson et al. - 2014 - Best Practices for Scientific Computing.PDF}
}

@article{Wilson2016,
  type = {General {{Literature}}; {{Computers}} and {{Society}}; {{Physics Education}}},
  title = {Software {{Carpentry}}: {{Lessons Learned}} [Version 2]},
  author = {Wilson, Greg},
  year = {2013},
  month = jul,
  journal = {F1000Research},
  volume = {3},
  eprint = {1307.5448},
  pages = {62},
  issn = {2046-1402},
  doi = {10.12688/f1000research.3-62.v2},
  abstract = {Over the last 15 years, Software Carpentry has evolved from a week-long training course at the US national laboratories into a worldwide volunteer effort to raise standards in scientific computing. This article explains what we have learned along the way the challenges we now face, and our plans for the future.},
  archiveprefix = {arxiv},
  keywords = {Education,Scientific Computing,Software Carpentry,SoftwareCarpentry,Training},
  file = {/home/ostueker/Zotero/storage/4L3ZC63B/Wilson - 2013 - Software Carpentry Lessons Learned.pdf;/home/ostueker/Zotero/storage/WPHBISV6/Wilson - 2013 - Software Carpentry Lessons Learned.html}
}
