{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Features needed</p> <ul> <li> <p>Features in the Carpentries Style:</p> <ul> <li> Generate Syllabus-table from episodes' metadata<ul> <li> deal with multi-day workshops</li> </ul> </li> <li> add name of language to code-blocks (CSS <code>::BEFORE</code> )</li> <li> add output and error boxes like in SWC style</li> <li> add exercise and solution boxes</li> <li> prev / next episode navigation at the top</li> <li> add \"Overview\" and \"Key Points\" to episodes.</li> </ul> </li> <li> <p>ACENET Customizations</p> <ul> <li> scientific references and bibliography</li> <li> LaTeX Math (KaTeX)</li> <li> instructor view</li> </ul> </li> </ul>"},{"location":"LICENSE/","title":"Licenses","text":""},{"location":"LICENSE/#instructional-material","title":"Instructional Material","text":"<p>This ACENET instructional material is made available under the Creative Commons Attribution license. The following is a human-readable summary of (and not a substitute for) the full legal text of the CC BY 4.0 license.</p> <p>You are free:</p> <ul> <li>to Share---copy and redistribute the material in any medium or format</li> <li>to Adapt---remix, transform, and build upon the material</li> </ul> <p>for any purpose, even commercially.</p> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p> <p>Under the following terms:</p> <ul> <li>Attribution---You must give appropriate credit (mentioning that   your work is derived from work that is Copyright \u00a9 ACENET,   where practical, linking to https://www.ace-net.ca/ ),    provide a link to the license,   and indicate if changes were made. You may do   so in any reasonable manner, but not in any way that suggests the   licensor endorses you or your use.</li> </ul> <p>No additional restrictions---You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.  With the understanding that:</p> <p>Notices:</p> <ul> <li>You do not have to comply with the license for elements of the   material in the public domain or where your use is permitted by an   applicable exception or limitation.</li> <li>No warranties are given. The license may not give you all of the   permissions necessary for your intended use. For example, other   rights such as publicity, privacy, or moral rights may limit how you   use the material.</li> </ul>"},{"location":"LICENSE/#software","title":"Software","text":"<p>Except where otherwise noted, the example programs and other software provided by the Digital Research Alliance of Canada are made  available under the OSI-approved MIT license.</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"episodes/04-formatting/","title":"Formatting","text":"<p>A lesson consists of one or more episodes, each of which has:</p> <ul> <li>a [YAML][yaml] header containing required values</li> <li>some teachable content</li> <li>some exercises</li> </ul> <p>The diagram below shows the internal structure of a single episode file (click on the image to see a larger version):</p>"},{"location":"episodes/04-formatting/#maximum-line-length","title":"Maximum Line Length","text":"<p>Limit all lines to a maximum of 100 characters. <code>bin/lesson_check.py</code> will report lines longer than 100 characters and this can block your contributions of being accepted.</p> <p>The two reasons behind the decision to enforce a maximum line length are (1) make diff and merge easier in the command line and other user interfaces and (2) make update of translation of the lessons easier.</p>"},{"location":"episodes/04-formatting/#locations-and-names","title":"Locations and Names","text":"<p>Episode files are stored in <code>_episodes</code> or, for the case of R Markdown files, <code>_episodes_rmd</code> so that [Jekyll][jekyll] will create a [collection][jekyll-collection] for them. Episodes are named <code>dd-subject.md</code>, where <code>dd</code> is a two-digit sequence number (with a leading 0) and <code>subject</code> is a one- or two-word identifier. For example, the first three episodes of this example lesson are <code>_episodes/01-design.md</code>, <code>_episodes/02-tooling.md</code> and <code>_episodes/03-formatting.md</code>. These become <code>/01-design/index.html</code>, <code>/02-tooling/index.html</code>, and <code>/03-formatting/index.html</code> in the published site. When referring to other episodes, use:</p> <pre><code>    [link text]({{ page.root }}{% link _episodes/dd-subject.md %})\n</code></pre> <p>i.e., use [Jekyll's link tag][jekyll-link-tag] and the name of the file.</p>"},{"location":"episodes/04-formatting/#episode-header","title":"Episode Header","text":"<p>Each episode's [YAML][yaml] header must contain:</p> <ul> <li>the episode's title</li> <li>time estimates for teaching and exercises</li> <li>motivating questions</li> <li>lesson objectives</li> <li>a summary of key points</li> </ul> <p>These values are stored in the header so that [Jekyll][jekyll] will read them and make them accessible in other pages as <code>site.episodes.the_episode.key</code>, where <code>the_episode</code> is the particular episode and <code>key</code> is the key in the [YAML][yaml] header. This lets us do things like list each episode's key questions in the syllabus on the lesson home page.</p>"},{"location":"episodes/04-formatting/#episode-structure","title":"Episode Structure","text":"<p>The episode layout template in <code>_layouts/episode.html</code> automatically creates an introductory block that summarizes the lesson's teaching time, exercise time, key questions, and objectives. It also automatically creates a closing block that lists its key points. In between, authors should use only:</p> <ul> <li>paragraphs</li> <li>images</li> <li>tables</li> <li>ordered and unordered lists</li> <li>code samples (described below).</li> <li>special blockquotes (described below)</li> </ul> <p>Authors should not use:</p> <ul> <li>sub-titles (instead, use H2 subheadings (<code>##</code>) in the episode files)</li> <li>HTML layout (e.g., <code>div</code> elements).</li> </ul> <p>Linking section IDs</p> <p>In the HTML output each header of a section, code sample, exercise will be associated with an unique ID (the rules of the ID generation are given in kramdown documentation, but it is easier to look for them directly in the page sources). These IDs can be used to easily link to the section by attaching the hash (<code>#</code>) followed by the ID to the page's URL (like this). For example, the instructor might copy the link to the etherpad, so that the lesson opens in learners' web browser directly at the right spot.</p>"},{"location":"episodes/04-formatting/#formatting-code","title":"Formatting Code","text":"<p>Inline code fragments are formatted using backticks (<code>`</code>). Longer code blocks are formatted by opening and closing the block with <code>```</code> (three backticks):</p> <pre><code>```\nfor thing in collection:\n    do_something\n```\n</code></pre> <p>which is rendered as: <pre><code>for thing in collection:\n    do_something\n</code></pre></p> <p>The three backticks can be followed by the name of a language (e.g. <code>python</code>)  for syntax highlighting: <pre><code>```python\nfor thing in collection:\n    do_something\n```\n</code></pre> which is rendered as: <pre><code>for thing in collection:\n    do_something\n</code></pre></p> <p>Or they can be followed by an expression in braces, where the first denotes the language and the  second a class for additional formatting:</p> <pre><code>```{.text .class}\nLanguage: `text` (no highlighting) and class `.class`\n```\n</code></pre> <p>The template provides three styles for code blocks:</p>"},{"location":"episodes/04-formatting/#program-output","title":"Program Output:","text":"<p>With class <code>.output</code>, this code ... <pre><code>```{.text .output}\n{.text .output}: program output.\n```\n</code></pre> will be shown as: <pre><code>{.text .output}: program output.\n</code></pre></p>"},{"location":"episodes/04-formatting/#error","title":"Error","text":"<p>With class <code>.error</code>, this code ... <pre><code>```{.text .error}\n{.text .error}: error messages.\n```\n</code></pre> will be shown as: <pre><code>{.text .error}: error messages.\n</code></pre></p>"},{"location":"episodes/04-formatting/#warning","title":"Warning","text":"<p>With class <code>.warning</code>, this code ... <pre><code>```{.text .warning}\n{.text .error}: warning messages.\n```\n</code></pre> will be shown as: <pre><code>{.text .warning}: warning messages.\n</code></pre></p>"},{"location":"episodes/04-formatting/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>The following styles like <code>.source</code>, but include syntax highlighting for the specified language. Please use them where possible to indicate the type of source being displayed, and to make code easier to read.</p> <ul> <li> <p><code>bash</code>: Bash commands:   <pre><code>echo \"Hello World\"\n</code></pre></p> </li> <li> <p><code>console</code>:   Shell command with prompt and output:   <pre><code>$ ls\nDesktop     Downloads   Movies      Pictures\nDocuments   Library     Music       Public\n</code></pre></p> </li> <li> <p><code>html</code>: HTML source:   <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;em&gt;Hello World&lt;/em&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> </li> <li> <p><code>make</code>: Makefiles:   <pre><code>all:\n    g++ main.cpp hello.cpp -o hello\n</code></pre></p> </li> <li> <p><code>matlab</code>: MATLAB source:   <pre><code>disp('Hello, world!')\n</code></pre></p> </li> <li> <p><code>python</code>: Python source:   <pre><code>print(\"Hello World\")\n</code></pre></p> </li> <li> <p><code>r</code>: R source:   <pre><code>cat(\"Hello World\")\n</code></pre></p> </li> <li> <p><code>sql</code>: SQL source:   <pre><code>CREATE PROCEDURE HelloWorld AS\nPRINT 'Hello, world!'\nRETURN (0)\n</code></pre></p> </li> </ul> <p>All languages that are recognized and will show the name of the language in the tile are:</p> Basic Chapel D Java Make Python Scala Bash CMake Fortran Julia MATLAB R SQL C Console Go Kotlin OpenCL Ruby TCL C++ Cuda HTML Lua Perl Rust Vulkan Highlighting for other languages <p>MkDocs supports syntax highlighting for a long list of programming languages. Syntax highlighting is provided by the Pygments library and a full list of supported languages can be found here. To use syntax highlighting, just put the short-name for the language directly after the  opening block.</p> <p>For example,</p> <pre><code>   ```yaml\n   title: \"YAML Highlighting Example\"\n   description: \"This is an example of syntax highlighting for YAML.\"\n   array_values:\n       - value_1\n       - value_2\n   ```\n</code></pre> <p>will produce this:</p> <pre><code>title: \"YAML Highlighting Example\"\ndescription: \"This is an example of syntax highlighting for YAML.\"\narray_values:\n    - value_1\n    - value_2\n</code></pre>"},{"location":"episodes/04-formatting/#advanced-code-block-features","title":"Advanced Code Block Features","text":"<p>MkDocs-Material supports a variety of additional features for code-blocks, such as:</p> <ul> <li>adding a title (e.g. for a filename)</li> <li>adding annotations</li> <li>adding line numbers</li> <li>highlighting specific lines</li> <li>highlighting inline code blocks </li> </ul> <p>Please refer to the page on  Code Blocks  in the MkDocs-Material Reference manual on how to use them.</p>"},{"location":"episodes/04-formatting/#callouts-admonitions","title":"Callouts (Admonitions)","text":"<p>Callouts (which mkdocs-material called Admonitions) can be used to create  formatted boxes around special content like notes, challenges, checkpoints, to have them stand out optically.</p> <p>The callout it initiated by beginning a line with three exclamation marks <code>!!!</code>  followed by a space and the callout type (e.g. <code>note</code>) and optionally a title. If no title is given, The capitalized type is used as a the title. This is followed by lines that are indented with four spaces, to be align vertically with callout type. The content of the callout-box ends, once text resumes vertically aligned with the exclamation marks.</p> <p>For example:</p> <pre><code>!!! note \"Callout Title\"\n\n    text\n    text\n    text\n\n    ```\n    code\n    ```\n</code></pre> <p>This is rendered as:</p> <p>Callout Title</p> <p>text text text</p> <pre><code>code\n</code></pre> <p>If three question-marks (<code>???</code>) are used to create a Collapsible callout  which is used with solutions for exercises:</p> <pre><code>??? solution\n    Exercise solution.  \n    Start callout-block with `???` instead of `!!!` to hide the answer on load.\n</code></pre> Solution <p>Exercise solution. Start callout-block with <code>???</code> instead of <code>!!!</code> to hide the answer on load.</p> <p>The lesson template defines styles for the following special callouts:</p> <ul> <li> <p>Tag <code>callout</code></p>   An aside or other comment. </li> <li> <p>Objectives</p>   Episode objectives </li> <li> <p>Challenge</p>   An exercise. </li> <li> <p>Prereq</p>   Prerequisites. </li> <li> <p>Checklist</p>   Checklists. </li> <li> Solution   Exercise solution.   Start callout-block with <code>???</code> instead of <code>!!!</code> to hide the answer on load. </li> <li> <p>Discussion</p>   Discussion questions. </li> <li> <p>Testimonial</p>   A laudatory quote from a user. </li> <li> <p>Keypoints</p>   Key points of an episode. </li> <li> <p>Caution</p>   A Warning. </li> </ul> <p>Note that <code>challenge</code> and <code>discussion</code> have the same color but different icons.</p> <p>Most authors will only use <code>callout</code>, <code>challenge</code>, and <code>prereq</code>, as the others are automatically generated by the template. Note that <code>prereq</code> is meant for describing things that learners should know before starting this lesson; setup instructions do not have a particular style, but are instead put on the <code>docs/setup.md</code> page.</p> <p>Note also that solutions are nested inside exercises as shown below:</p> <pre><code>!!! challenge \"Challenge Title\"\n    This is the body of the challenge.\n\n    ```\n    it may include some code\n    ```\n\n    ??? solution \"Solution\"\n\n        This is the body of the solution.\n\n        ```\n        it may also include some code\n        ```\n</code></pre> <p>Challenge Title</p> <p>This is the body of the challenge.</p> <pre><code>it may include some code\n</code></pre> Solution <p>This is the body of the solution.</p> <pre><code>it may also include some code\n</code></pre> <p>The double indentation is annoying to edit, but the alternatives we considered and discarded are worse:</p> <ol> <li> <p>Use HTML <code>&lt;div&gt;</code> elements for the challenges.     Most people dislike mixing HTML and Markdown,     and experience shows that it's all too easy to confuse Markdown parsers.</p> </li> <li> <p>Put solutions immediately after challenges rather than inside them.     This is simpler to edit,     but clutters up the page     and makes it harder for tools to tell which solutions belong to which exercises.</p> </li> </ol>"},{"location":"episodes/04-formatting/#applying-a-shadow-to-images","title":"Applying a Shadow to Images","text":"<p>By default, images in the lesson are displayed without borders or shadows. In some circumstances, it may be desirable to make images stand out from the background of the page, for example, when using screenshots that include text on white background. You can add a drop shadow effect to images by applying the <code>image-with-shadow</code> class to them:</p> <pre><code>![image alt text](path/to/image/source.svg){: .image-with-shadow }\n</code></pre>"},{"location":"episodes/05-advanced-formatting/","title":"Advanced Formatting","text":""},{"location":"episodes/05-advanced-formatting/#mathematical-equations","title":"Mathematical Equations","text":"<p>This style has KaTeX enabled, allowing for writing mathematical expressions in LaTeX math notation.</p>"},{"location":"episodes/05-advanced-formatting/#using-block-syntax","title":"Using Block Syntax","text":"<p>Blocks must be enclosed in <code>$$...$$</code> or <code>\\[...\\]</code> on separate lines:</p> <p>block syntax<pre><code>$$\nV_{LJ}(r)=\\frac{C12}{r^{12}}-\\frac{C6}{r^{6}}\n$$\n</code></pre> $$ V_{LJ}(r)=\\frac{C12}{r^{12}}-\\frac{C6}{r^{6}} $$</p>"},{"location":"episodes/05-advanced-formatting/#using-inline-block-syntax","title":"Using inline block syntax","text":"<p>Inline blocks must be enclosed in \\(...\\) or \\(...\\):</p> block syntax<pre><code>The Pythagorean theorem $a^2+b^2=c^2$ can be rearranged to $ c = \\sqrt{a^2 + b^2} $\n</code></pre> <p>The Pythagorean theorem \\(a^2+b^2=c^2\\) can be rearranged to $ c = \\sqrt{a^2 + b^2} $</p>"},{"location":"episodes/05-advanced-formatting/#example","title":"Example","text":"<p>The simplest way to write the time-independent Schr\u00f6dinger equation is \\(H\\psi = E\\psi\\),  however, with the Hamiltonian operator expanded it becomes:</p> \\[ -\\frac{\\hbar^2}{2m} \\frac{d^2 \\psi}{dx^2} + V\\psi = E\\psi\\\\ \\]"},{"location":"episodes/05-advanced-formatting/#mermaid-diagrams","title":"Mermaid Diagrams","text":"<p>Mermaid is a JavaScript library that can be used to write various graphs and flow-charts within Markdown and render them on a website.  This template has Mermaid support enabled and can be used as shown below.</p>"},{"location":"episodes/05-advanced-formatting/#flowchart","title":"Flowchart","text":"<p>Documentation for Mermaid Flowchart</p> <pre><code> ``` mermaid\n graph LR\n    A[Hard edge] --&gt;|Link text| B(Round edge)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result one]\n    C --&gt;|Two| E[Result two]\n ```\n</code></pre> <pre><code>graph LR\n    A[Hard edge] --&gt;|Link text| B(Round edge)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result one]\n    C --&gt;|Two| E[Result two]</code></pre>"},{"location":"episodes/05-advanced-formatting/#git-graph","title":"Git Graph","text":"<p>Documentation for Mermaid gitGraph</p> <pre><code> ``` mermaid\n gitGraph\n   commit id: \"C1\"\n   commit id: \"C2\"\n   branch develop\n   checkout develop\n   commit id: \"C3\"\n   commit id: \"C4\"\n   checkout main\n   merge develop\n   commit id: \"C5\"\n   commit id: \"C6\"\n ```\n</code></pre> <pre><code>gitGraph\n   commit id: \"C1\"\n   commit id: \"C2\"\n   branch develop\n   checkout develop\n   commit id: \"C3\"\n   commit id: \"C4\"\n   checkout main\n   merge develop\n   commit id: \"C5\"\n   commit id: \"C6\"</code></pre>"},{"location":"episodes/05-advanced-formatting/#instructor-view","title":"Instructor View","text":"<p>Some lessons are rather complex and require a lot of information, which can result in long blocks of text that are needed for self-study as well as new instructors that need to familiarize themselves with the material. In a workshop or presentation setting however it's difficult to pick out the talking points and having key information in bullet-points would be much better.</p> <p>A solution to this is to introduce an \"Instructor View\" that will hide paragraphs that have been  marked as <code>/// html | div[class=\"learner\"]</code> and instead show paragraphs marked as <code>/// html | div[class=\"instructor\"]</code>, which are otherwise hidden.  </p> <p>The instructor view can be enabled in the <code>mkdocs.yml</code> file with:</p> <pre><code>instructor_view_enable: true\n</code></pre> <p>If enabled, one the following toggle icons will appear in the Navigation bar at the top  to indicate which view is active and to toggle between them:</p> <ul> <li>Learner view active: </li> <li>Instructor view is active: </li> </ul> <p>The state of the toggle is persistent for some time (by default 7 days) by setting a cookie,  however this duration can be customized by a variable in <code>mkdocs.yml</code>:</p> <pre><code>instructor_view_cookie_lifetime: 3\n</code></pre> <p>Example:</p> <pre><code>/// html | div[class=\"learner\"]\nThis is a long text that describes a complex topic in detail. \nThis contains information that the instructor explains in detail.   \n_Lorem ipsum dolor sit amet,[...] sunt in culpa qui officia deserunt mollit anim id est laborum._\n///\n\n/// html | div[class=\"instructor\"]\n* talking points for instructor\n* easier to read during the workshop\n///\n</code></pre> <p>Will be shown as:</p> <p>This is a long text that describes a complex topic in detail. This contains information that the instructor explains in detail.  Lorem ipsum dolor sit amet,[...] sunt in culpa qui officia deserunt mollit anim id est laborum.</p> <ul> <li>talking points for instructor</li> <li>easier to read during the workshop</li> </ul>"},{"location":"episodes/05-advanced-formatting/#custom-code-blocks","title":"Custom code blocks","text":"<pre><code>s = loadpdb protein.pdb\nset {s.20 s.26} name \"ASH\"\nsavepdb s protonated.pdb\nquit\n</code></pre> <pre><code>trajin mdcrd_nowat.nc\ntrajout mdcrd_nowat.xtc\ngo\n</code></pre> <pre><code>cd ~/scratch/workshop/pdb/6N4O/simulation/sim_pmemd/4-production\nmol new prmtop_nowat.parm7\nmol addfile mdcrd_nowat.xtc step 5\n</code></pre> ~/.vmdrc<pre><code># VMD settings: file ~/.vmdrc\n\n# Turning-on of menus\nmenu main on\n\n# Change display defaults\ndisplay reposition 100 600\ndisplay resize 672 682\ndisplay projection Orthographic\ndisplay depthcue off\ndisplay rendermode GLSL\ndisplay ambientocclusion on\naxes location Off\ncolor Display Background white\n\n# Default material\nmol default material Diffuse\n\n# Configure keyboard shortcuts\nuser add key o {display projection orthographic} \nuser add key p {display projection perspective}\n</code></pre>"},{"location":"episodes/08-break/","title":"Section Break","text":"<p>{% include links.md %}</p>"},{"location":"episodes/09-introduction/","title":"Introduction","text":"<p>In laborum commodo anim deserunt amet nulla ipsum ipsum anim tempor commodo amet non nostrud. Quis ipsum consectetur amet nisi reprehenderit aliquip excepteur eiusmod nulla laboris. Labore nisi deserunt dolor consequat amet magna tempor aliqua mollit quis laborum qui irure consequat. Minim in mollit pariatur culpa laborum reprehenderit aute ut laborum laborum ad veniam duis adipisicing. Adipisicing esse irure exercitation ad quis aliqua fugiat ex esse est culpa exercitation. <sup>1</sup></p> <pre><code>import numpy as np\nimport pandas as pd\n</code></pre> <p>Math</p> \\[ f_v(v)=\\left(\\frac{m}{2\\pi k_B T}\\right)^{3/2}\\cdot4\\pi v^2\\cdot\\exp({-mv^2/2k_B T}) \\] <p>In laborum commodo anim deserunt amet nulla ipsum ipsum anim tempor commodo amet non nostrud. Quis ipsum consectetur amet nisi reprehenderit aliquip excepteur eiusmod nulla laboris. Labore nisi deserunt dolor consequat amet magna tempor aliqua mollit quis laborum qui irure consequat. Minim in mollit pariatur culpa laborum reprehenderit aute ut laborum laborum ad veniam duis adipisicing. Adipisicing esse irure exercitation ad quis aliqua fugiat ex esse est culpa exercitation. <sup>2</sup><sup>3</sup></p> <p><pre><code>ls -a\n</code></pre> <pre><code>./   ../   .bashrc\n</code></pre></p> <ol> <li> <p>Vermeyden L, Fishbein G. Teaching Technical Topics Effectively: How Teaching Humanists Has Changed How We Teach Everyone. IDEAH. 2023. doi:10.21428/f1f23564.e065e8ef \u21a9</p> </li> <li> <p>Wilson G, Aruliah DA, Brown CT, Chue Hong NP, Davis M, Guy RT, et al. Best Practices for Scientific Computing. PLoS Biology. 2014;12. doi:10.1371/journal.pbio.1001745 \u21a9</p> </li> <li> <p>Wilson G. Software Carpentry: Lessons Learned [version 2]. F1000Research. 2013;3: 62. doi:10.12688/f1000research.3-62.v2 \u21a9</p> </li> </ol>"},{"location":"extras/bibliography/","title":"Bibliography","text":"<ol> <li> <p>Vermeyden L, Fishbein G. Teaching Technical Topics Effectively: How Teaching Humanists Has Changed How We Teach Everyone. IDEAH. 2023. doi:10.21428/f1f23564.e065e8ef \u21a9</p> </li> <li> <p>Wilson G, Aruliah DA, Brown CT, Chue Hong NP, Davis M, Guy RT, et al. Best Practices for Scientific Computing. PLoS Biology. 2014;12. doi:10.1371/journal.pbio.1001745 \u21a9</p> </li> <li> <p>Wilson G. Software Carpentry: Lessons Learned [version 2]. F1000Research. 2013;3: 62. doi:10.12688/f1000research.3-62.v2 \u21a9</p> </li> </ol>"}]}